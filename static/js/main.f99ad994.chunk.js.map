{"version":3,"sources":["component/Button/Button.module.css","component/Input/Input.tsx","redux/setting-reducer.ts","component/Button/Button.tsx","redux/counter-reducer.ts","component/DisplaySetting/DisplaySetting.tsx","component/DisplayCounter/DisplayCounter.tsx","App.tsx","reportWebVitals.ts","redux/store.tsx","index.tsx","App.module.css"],"names":["module","exports","Input","props","className","type","value","onChange","e","currentTarget","valueAsNumber","initialState","startValue","maxValue","disabledSet","setDisableButtonSet","disabled","Button","s","btn","onClick","name","counter","disabledInc","disabledReset","messageItem","setCounter","disableButtonInc","disableButtonReset","setMessageItem","DisplaySetting","useSelector","state","settings","dispatch","useDispatch","useEffect","getValueString","localStorage","getItem","values","JSON","parse","getStartValueFromLocalStorage","conditions","checkValues","classErrorInput","errorInput","input","setting","setMaxValue","setStartValue","buttonSet","setItem","stringify","DisplayCounter","classError","error","display","errorMessage","message","buttons","incCounter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,IAAM,sB,+HCOXC,EAAQ,SAACC,GAMpB,OAAO,uBAAOC,UAAWD,EAAMC,UAAWC,KAAM,SAAUC,MAAOH,EAAMG,MAAOC,SAJxD,SAACC,GACrB,IAAMF,EAAQE,EAAEC,cAAcC,cAC9BP,EAAMI,SAASD,O,cCXbK,EAAe,CACjBC,WAAY,EACZC,SAAU,EACVC,aAAa,GAwDJC,EAAsB,SAACC,GAChC,MAAO,CAACX,KAAM,sBAAuBW,a,iBCpD5BC,EAAS,SAACd,GAIrB,OAAO,wBAAQC,UAAWc,IAAEC,IAAKH,SAAUb,EAAMa,SAAUI,QAHlC,WACvBjB,EAAMiB,WAED,SAA+E,+BAAOjB,EAAMkB,UCX/FV,EAAe,CACnBW,QAAS,EACTC,aAAa,EACbC,eAAe,EACfC,YAAa,IAgDFC,EAAa,SAACd,EAAoBI,GAArB,MAA4C,CACpEX,KAAM,cACNO,aACAI,aAOWW,EAAmB,SAACX,GAC/B,MAAO,CAACX,KAAM,sBAAuBW,aAG1BY,EAAqB,SAACZ,GACjC,MAAO,CAACX,KAAM,wBAAyBW,aAE5Ba,EAAiB,SAACJ,GAC7B,MAAO,CAACpB,KAAM,mBAAoBoB,gBCzDvBK,EAAiB,WAAO,IAAD,EAK9BC,aAA2D,SAAAC,GAAK,OAAIA,EAAMC,YAH5ErB,EAFgC,EAEhCA,WACAC,EAHgC,EAGhCA,SACAC,EAJgC,EAIhCA,YAGIoB,EAAWC,cAEjBC,qBAAU,WACR,IAAMC,EAAiBC,aAAaC,QAAQ,UAC5C,GAAIF,EAAgB,CAClB,IAAIG,EAASC,KAAKC,MAAML,GACxBH,EHqCI,CAAC7B,KAAK,mCAAoCC,MGrCTkC,EAAO3B,WAC5CqB,EHsCuC,SAAC5B,GAC1C,MAAM,CAACD,KAAK,qCAAsCC,SGvCvCqC,CAA8BH,EAAO5B,gBAE/C,CAACsB,IAEJ,IAAMU,EAAchC,EAAa,GAAKC,EAAW,GAAMA,EAAWD,GAAcC,IAAaD,EACvFiC,EAAc,WAClBX,EAASnB,GAAoB,IAC7BmB,EAASP,GAAiB,IAC1BO,EAASN,GAAmB,IACxBgB,GACFV,EAASL,EAAe,UACxBK,EAASnB,GAAoB,KAE7BmB,EAASL,EAAe,aAyBtBiB,EAAkBjC,IAAaD,EAAaM,IAAE6B,WAAa7B,IAAE8B,MAEnE,OACE,qCACE,sBAAK5C,UAAWc,IAAE+B,QAAlB,UACc,qCAAQ,cACN,cAAC,EAAD,CAAO7C,UAAW0C,EACXxC,MAAOO,EACPN,SAxBF,SAACM,GACxBqB,EHIuB,SAACrB,GACxB,MAAO,CAACR,KAAM,gBAAiBQ,YGLtBqC,CAAYrC,IACrBgC,UAwBI,qCAAQ,gBACN,cAAC,EAAD,CAAOzC,UAAW0C,EACXxC,MAAOM,EACPL,SAlCY,SAACK,GAC1BsB,EHKyB,SAACtB,GAC1B,MAAO,CAACP,KAAM,kBAAmBO,cGNxBuC,CAAcvC,IACvBiC,aAmCE,qBAAKzC,UAAWc,IAAEkC,UAAlB,SACE,cAAC,EAAD,CAAQ/B,KAAM,MAAOL,SAAUF,EAAaM,QA5BzB,WACvB,IAAMoB,EAAS,CACb5B,aAAYC,YAEdyB,aAAae,QAAQ,SAAUZ,KAAKa,UAAUd,IAC9CN,EAASL,EAAe,UACxBK,EAASR,EAAWd,GAAY,IAChCsB,EAASnB,GAAoB,IAC7BmB,EAASN,GAAmB,aChDnB2B,EAAiB,WAAO,IAAD,EAM9BxB,aAA0D,SAAAC,GAAK,OAAIA,EAAMV,WAJ3EA,EAFgC,EAEhCA,QACAC,EAHgC,EAGhCA,YACAC,EAJgC,EAIhCA,cACAC,EALgC,EAKhCA,YALgC,EAOHM,aAA2D,SAAAC,GAAK,OAAIA,EAAMC,YAAlGpB,EAP2B,EAO3BA,SAAUD,EAPiB,EAOjBA,WAEXsB,EAAWC,cAEXqB,EAAalC,IAAYT,EAAWK,IAAEuC,MAAQvC,IAAEI,QA6BtD,OACE,qCACE,qBAAKlB,UAAWc,IAAEwC,QAAlB,SACE,8BAnBU,WACd,OAAQjC,GACN,IAAK,UACH,OAAO,iEAET,IAAK,QACH,OAAO,qBAAKrB,UAAWc,IAAEyC,aAAlB,8BAET,IAAK,QACH,OAAO,qBAAKvD,UAAWoD,EAAhB,SAA6BlC,IAEtC,QACE,OAAO,qBAAKlB,UAAWc,IAAEI,QAAlB,SAA4BA,KAO7BsC,OAER,sBAAKxD,UAAWc,IAAE2C,QAAlB,UACE,cAAC,EAAD,CAAQxC,KAAM,MACNL,SAAUO,EACVH,QApCW,WACvBc,EF+BsB,SAACZ,EAAiBT,GAC1C,MAAO,CAACR,KAAM,cAAeiB,UAAST,YEhC3BiD,CAAWxC,EAAST,IACzBS,EAAU,GAAKT,IACjBqB,EAASP,GAAiB,IAC1BO,EAASN,GAAmB,QAiC1B,cAAC,EAAD,CAAQP,KAAM,QACNL,SAAUQ,EACVJ,QA/Ba,WACzBc,EAASR,EAAWd,GAAY,cCnBrBmD,MAbf,WACE,OACE,sBAAK3D,UAAWc,IAAE6C,IAAlB,UACE,qBAAK3D,UAAWc,IAAEQ,WAAlB,SACE,cAAC,EAAD,MAEF,qBAAKtB,UAAWc,IAAEQ,WAAlB,SACE,cAAC,EAAD,UCEOsC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCLRQ,EAAcC,YAAgB,CAClCzC,SPU4B,WAAiH,IAAhHD,EAA+G,uDAAtErB,EAAcgE,EAAwD,uCAC1I,OAAQA,EAAOtE,MACX,IAAK,kBACD,OAAO,2BACA2B,GADP,IAEIpB,WAAY+D,EAAO/D,aAG3B,IAAK,gBACD,OAAO,2BACAoB,GADP,IAEInB,SAAU8D,EAAO9D,WAGzB,IAAM,sBACF,OAAO,2BACAmB,GADP,IAEIlB,YAAa6D,EAAO3D,WAG5B,IAAK,mCACD,OAAO,2BACAgB,GADP,IAEInB,SAAU8D,EAAOrE,QAGzB,IAAK,qCACD,OAAO,2BACA0B,GADP,IAEIpB,WAAY+D,EAAOrE,QAG3B,QACI,OAAO0B,IO1CjBV,QLU4B,WAAgH,IAA/GU,EAA8G,uDAAtErB,EAAcgE,EAAwD,uCAC3I,OAAQA,EAAOtE,MACb,IAAK,cACH,OAAO,2BACF2B,GADL,IAEEV,QAASqD,EAAO/D,WAChBW,YAAaoD,EAAO3D,WAGxB,IAAK,mBACH,OAAO,2BACFgB,GADL,IAEEP,YAAakD,EAAOlD,cAGxB,IAAK,cACH,OAAO,2BACFO,GADL,IAEEV,QAASqD,EAAOrD,QAAU,IAG9B,IAAK,sBACH,OAAO,2BACFU,GADL,IAEET,YAAaoD,EAAO3D,WAGxB,IAAK,wBACH,OAAO,2BACFgB,GADL,IAEER,cAAemD,EAAO3D,WAG1B,QACE,OAAOgB,MKzCA4C,EAAQC,YAAYJ,GAMjCK,OAAOF,MAAQA,ECPfG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SAM1BnB,K,kBCnBAhE,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAa,wBAAwB,SAAW,sBAAsB,QAAU,yCAAyC,QAAU,yCAAyC,QAAU,qBAAqB,MAAQ,mBAAmB,OAAS,oBAAoB,UAAY,yCAAyC,QAAU,uCAAuC,WAAa,yCAAyC,aAAe,0BAA0B,MAAQ,sB","file":"static/js/main.f99ad994.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3a6AQ\"};","import {ChangeEvent} from 'react';\r\n\r\ntype InputPropsType = {\r\n  className: string\r\n  value: number\r\n  onChange: (startValue: number) => void\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n\r\n  const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.currentTarget.valueAsNumber;\r\n    props.onChange(value)\r\n  }\r\n  return <input className={props.className} type={'number'} value={props.value} onChange={onChangeValue}/>\r\n\r\n};","\r\nconst initialState = {\r\n    startValue: 0,\r\n    maxValue: 1,\r\n    disabledSet: false,\r\n}\r\n\r\nexport type InitialStateSettingsReducerType = typeof initialState;\r\n\r\ntype ActionType = ReturnType<typeof setStartValue>\r\n    | ReturnType<typeof setDisableButtonSet>\r\n    | ReturnType<typeof setMaxValue>\r\n    | ReturnType<typeof getMaxValueFromLocalStorage>\r\n    | ReturnType<typeof getStartValueFromLocalStorage>\r\n\r\nexport const settingReducer = (state: InitialStateSettingsReducerType = initialState, action: ActionType): InitialStateSettingsReducerType => {\r\n    switch (action.type) {\r\n        case 'SET-START-VALUE': {\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue,\r\n            }\r\n        }\r\n        case 'SET-MAX-VALUE': {\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n            }\r\n        }\r\n        case  'SET-DISABLE-BTN-SET': {\r\n            return {\r\n                ...state,\r\n                disabledSet: action.disabled,\r\n            }\r\n        }\r\n        case 'GET-MAX-VALUE-FROM-LOCAL-STORAGE': {\r\n            return {\r\n                ...state,\r\n                maxValue: action.value\r\n            }\r\n        }\r\n        case 'GET-START-VALUE-FROM-LOCAL-STORAGE': {\r\n            return {\r\n                ...state,\r\n                startValue: action.value\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setStartValue = (startValue: number) => {\r\n    return {type: 'SET-START-VALUE', startValue} as const\r\n}\r\n\r\nexport const setMaxValue = (maxValue: number) => {\r\n    return {type: 'SET-MAX-VALUE', maxValue} as const\r\n}\r\n\r\nexport const setDisableButtonSet = (disabled: boolean) => {\r\n    return {type: 'SET-DISABLE-BTN-SET', disabled} as const\r\n}\r\n\r\nexport const getMaxValueFromLocalStorage = (value: number) => {\r\n    return{type:'GET-MAX-VALUE-FROM-LOCAL-STORAGE', value} as const\r\n}\r\nexport const getStartValueFromLocalStorage = (value: number) => {\r\n    return{type:'GET-START-VALUE-FROM-LOCAL-STORAGE', value} as const\r\n}","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype ButtonPropsType = {\r\n  name: string\r\n  disabled: boolean\r\n  onClick: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n  const onClickButtonSet = () => {\r\n    props.onClick()\r\n  }\r\n  return <button className={s.btn} disabled={props.disabled} onClick={onClickButtonSet}><span>{props.name}</span>\r\n  </button>\r\n}","import {MessageType} from '../component/DisplayCounter/DisplayCounter';\r\n\r\nconst initialState = {\r\n  counter: 0,\r\n  disabledInc: true,\r\n  disabledReset: true,\r\n  messageItem: '',\r\n}\r\nexport type InitialStateCounterReducerType = typeof initialState;\r\n\r\ntype ActionTypes = ReturnType<typeof setCounter>\r\n  | ReturnType<typeof incCounter>\r\n  | ReturnType<typeof setMessageItem>\r\n  | ReturnType<typeof disableButtonInc>\r\n  | ReturnType<typeof disableButtonReset>\r\n\r\nexport const counterReducer = (state: InitialStateCounterReducerType = initialState, action: ActionTypes): InitialStateCounterReducerType => {\r\n  switch (action.type) {\r\n    case 'SET-COUNTER': {\r\n      return {\r\n        ...state,\r\n        counter: action.startValue,\r\n        disabledInc: action.disabled\r\n      }\r\n    }\r\n    case 'SET-MESSAGE-ITEM': {\r\n      return {\r\n        ...state,\r\n        messageItem: action.messageItem\r\n      }\r\n    }\r\n    case 'INC-COUNTER': {\r\n      return {\r\n        ...state,\r\n        counter: action.counter + 1\r\n      }\r\n    }\r\n    case 'DISABLED-BUTTON-INC': {\r\n      return {\r\n        ...state,\r\n        disabledInc: action.disabled\r\n      }\r\n    }\r\n    case 'DISABLED-BUTTON-RESET': {\r\n      return {\r\n        ...state,\r\n        disabledReset: action.disabled\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setCounter = (startValue: number, disabled: boolean) => ({\r\n  type: 'SET-COUNTER',\r\n  startValue,\r\n  disabled\r\n} as const)\r\n\r\nexport const incCounter = (counter: number, maxValue: number) => {\r\n  return {type: 'INC-COUNTER', counter, maxValue} as const\r\n}\r\n\r\nexport const disableButtonInc = (disabled: boolean) => {\r\n  return {type: 'DISABLED-BUTTON-INC', disabled} as const\r\n}\r\n\r\nexport const disableButtonReset = (disabled: boolean) => {\r\n  return {type: 'DISABLED-BUTTON-RESET', disabled} as const\r\n}\r\nexport const setMessageItem = (messageItem: MessageType) => {\r\n  return {type: 'SET-MESSAGE-ITEM', messageItem} as const\r\n}\r\n\r\n","import s from '../../App.module.css';\r\nimport {Input} from '../Input/Input';\r\nimport React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {\r\n  getMaxValueFromLocalStorage, getStartValueFromLocalStorage,\r\n  InitialStateSettingsReducerType,\r\n  setDisableButtonSet,\r\n  setMaxValue,\r\n  setStartValue,\r\n} from '../../redux/setting-reducer';\r\nimport {Button} from '../Button/Button';\r\nimport {disableButtonInc, disableButtonReset, setCounter, setMessageItem} from '../../redux/counter-reducer';\r\n\r\nexport const DisplaySetting = () => {\r\n  const {\r\n    startValue,\r\n    maxValue,\r\n    disabledSet\r\n  } = useSelector<AppStateType, InitialStateSettingsReducerType>(state => state.settings);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const getValueString = localStorage.getItem('values')\r\n    if (getValueString) {\r\n      let values = JSON.parse(getValueString)\r\n      dispatch(getMaxValueFromLocalStorage(values.maxValue))\r\n      dispatch(getStartValueFromLocalStorage(values.startValue))\r\n    }\r\n  }, [dispatch])\r\n\r\n  const conditions = (startValue < 0 || maxValue < 0) || maxValue < startValue || maxValue === startValue;\r\n  const checkValues = () => {\r\n    dispatch(setDisableButtonSet(false))\r\n    dispatch(disableButtonInc(true))\r\n    dispatch(disableButtonReset(true))\r\n    if (conditions) {\r\n      dispatch(setMessageItem('Error'))\r\n      dispatch(setDisableButtonSet(true))\r\n    } else {\r\n      dispatch(setMessageItem('Setting'));\r\n    }\r\n  }\r\n\r\n  const onChangeStartValue = (startValue: number) => {\r\n    dispatch(setStartValue(startValue));\r\n    checkValues()\r\n  }\r\n\r\n  const onChangeMaxValue = (maxValue: number) => {\r\n    dispatch(setMaxValue(maxValue))\r\n    checkValues()\r\n  }\r\n\r\n  const onClickButtonSet = () => {\r\n    const values = {\r\n      startValue, maxValue\r\n    }\r\n    localStorage.setItem('values', JSON.stringify(values))\r\n    dispatch(setMessageItem('Count'))\r\n    dispatch(setCounter(startValue, false))\r\n    dispatch(setDisableButtonSet(true))\r\n    dispatch(disableButtonReset(false))\r\n  }\r\n\r\n  const classErrorInput = maxValue === startValue ? s.errorInput : s.input;\r\n\r\n  return (\r\n    <>\r\n      <div className={s.setting}>\r\n                    <span> {'max value: '}\r\n                      <Input className={classErrorInput}\r\n                             value={maxValue}\r\n                             onChange={onChangeMaxValue}/>\r\n                    </span>\r\n        <span> {'start value: '}\r\n          <Input className={classErrorInput}\r\n                 value={startValue}\r\n                 onChange={onChangeStartValue}/>\r\n                    </span>\r\n      </div>\r\n      <div className={s.buttonSet}>\r\n        <Button name={'SET'} disabled={disabledSet} onClick={onClickButtonSet}/>\r\n      </div>\r\n    </>\r\n  )\r\n}","import s from '../../App.module.css';\r\nimport {Button} from '../Button/Button';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {\r\n  disableButtonInc,\r\n  disableButtonReset,\r\n  incCounter,\r\n  InitialStateCounterReducerType,\r\n  setCounter\r\n} from '../../redux/counter-reducer';\r\nimport {InitialStateSettingsReducerType} from '../../redux/setting-reducer';\r\n\r\nexport type MessageType = 'Setting' | 'Error' | 'Count'\r\n\r\nexport const DisplayCounter = () => {\r\n  const {\r\n    counter,\r\n    disabledInc,\r\n    disabledReset,\r\n    messageItem\r\n  } = useSelector<AppStateType, InitialStateCounterReducerType>(state => state.counter)\r\n  const {maxValue, startValue} = useSelector<AppStateType, InitialStateSettingsReducerType>(state => state.settings)\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const classError = counter === maxValue ? s.error : s.counter\r\n  const onClickButtonInc = () => {\r\n    dispatch(incCounter(counter, maxValue));\r\n    if (counter + 1 >= maxValue) {\r\n      dispatch(disableButtonInc(true))\r\n      dispatch(disableButtonReset(false))\r\n    }\r\n  }\r\n\r\n  const onClickButtonReset = () => {\r\n    dispatch(setCounter(startValue, false))\r\n  }\r\n\r\n  const message = () => {\r\n    switch (messageItem) {\r\n      case 'Setting': {\r\n        return <div> enter values and press 'set' </div>;\r\n      }\r\n      case 'Error': {\r\n        return <div className={s.errorMessage}>Incorrect value!</div>\r\n      }\r\n      case 'Count': {\r\n        return <div className={classError}>{counter}</div>\r\n      }\r\n      default:\r\n        return <div className={s.counter}>{counter}</div>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={s.display}>\r\n        <div>{message()}</div>\r\n      </div>\r\n      <div className={s.buttons}>\r\n        <Button name={'INC'}\r\n                disabled={disabledInc}\r\n                onClick={onClickButtonInc}/>\r\n        <Button name={'RESET'}\r\n                disabled={disabledReset}\r\n                onClick={onClickButtonReset}/>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react';\nimport s from './App.module.css';\nimport {DisplaySetting} from './component/DisplaySetting/DisplaySetting';\nimport {DisplayCounter} from './component/DisplayCounter/DisplayCounter';\n\nfunction App() {\n  return (\n    <div className={s.App}>\n      <div className={s.setCounter}>\n        <DisplaySetting/>\n      </div>\n      <div className={s.setCounter}>\n        <DisplayCounter/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport {settingReducer} from './setting-reducer';\r\nimport {counterReducer} from './counter-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  settings: settingReducer,\r\n  counter: counterReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__4Ym4t\",\"setCounter\":\"App_setCounter__xyjWg\",\"settings\":\"App_settings__32OA8\",\"setting\":\"App_setting__2JETz App_settings__32OA8\",\"display\":\"App_display__SiOv2 App_settings__32OA8\",\"counter\":\"App_counter__2a0fC\",\"input\":\"App_input__3egPB\",\"button\":\"App_button__xTbwu\",\"buttonSet\":\"App_buttonSet__1Xd-_ App_button__xTbwu\",\"buttons\":\"App_buttons__2ok-K App_button__xTbwu\",\"errorInput\":\"App_errorInput__hvz4q App_input__3egPB\",\"errorMessage\":\"App_errorMessage__5t2Rl\",\"error\":\"App_error__2xyex\"};"],"sourceRoot":""}